<?php

/**
 * @file
 * Contains pwa.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\pwa\Model\SubscriptionsDatastorage;
use Drupal\Core\Queue\QueueFactory;
use Drupal\Core\Queue\QueueInterface;
use Drupal\Component\Serialization\Json;

/**
 * Implements hook_help().
 */
function pwa_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the pwa module.
    case 'help.page.pwa':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Progressive Web App') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_page_attachments().
 */
function pwa_page_attachments(array &$page) {
  $manifest = [
        '#tag' => 'link',
        '#attributes' => [
          'rel' => 'manifest',
          'href' => 'manifest.json',
        ],
      ];
  $page['#attached']['html_head'][] = [$manifest, 'manifest'];
  $public_key = \Drupal::config('pwa.pwa')->get('public_key');
  $page['#attached']['drupalSettings']['pwa']['public_key'] = $public_key;

  if (isset($public_key)) {
    $page['#attached']['library'][] = 'pwa/pwa.js';
  }
}

function pwa_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $nid=$node->id();
  if(!($node->load($nid))) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'pwa_node_form_submit';
      }
    }
  }
}

function pwa_node_form_submit($form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $config = \Drupal::config('pwa.pwa.subscription');
  $publish_notify = $config->get('activate_feature');
  $nodepublished =  $node->isPublished();
  $enabled_content_types = $config->get('enabled_content_types');
  $node_type = $form_state->getFormObject()->getEntity()->getType();
  foreach($enabled_content_types as $types) {
    if($types == $node_type) {
      $send_notifications = 1;
    }
  }
  if(!empty($nodepublished) && !empty($send_notifications) && !empty($publish_notify)) {
    $pwa_config = \Drupal::config('pwa.pwa');
    $icon = $pwa_config->get('icon_path');
    $icon_path = file_create_url($icon);
    $options = ['absolute' => TRUE];
    $url = \Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $node->id()], $options);
    $url = $url->toString();
    $entry = [
      'title' => "New '$node_type' content is published. Click to view.",
      'message' => "",
      'icon' => $icon_path,
      'url' => $url,
      'content-details' => [
        'nodeid' => $node->id(),
        'nodetype' => $node_type
      ]
    ];
    $notification_data = Json::encode($entry);
    $subscriptions = SubscriptionsDatastorage::loadAll();
    $pwa_public_key = $pwa_config->get('public_key');
    $pwa_private_key = $pwa_config->get('private_key');
    if (!empty($subscriptions) && !empty($pwa_public_key) && !empty($pwa_private_key)) {
      /** @var QueueFactory $queue_factory */
      $queue_factory = \Drupal::service('queue');
      /** @var QueueInterface $queue */
      $queue = $queue_factory->get('cron_send_notification');
      $item = new \stdClass();
      $item->subscriptions = $subscriptions;
      $item->notification_data = $notification_data;
      $queue->createItem($item);
    }
  }
}