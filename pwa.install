<?php

/**
 * @file
 * Contains pwa.install functionality.
 */

use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_uninstall().
 */
function pwa_uninstall() {
  // Delete remaining general module variables.
   $config_factory = Drupal::configFactory();
  // Delete all of the default settings.
  $config_factory->getEditable('pwa.settings')->delete();
  // Define all the image styles that need to be removed.
  $all_image_styles = ImageStyle::loadMultiple();
  foreach ($all_image_styles as $img) {
    $name_of_img = $img->getName();
    if(substr( $name_of_img, 0, 4 ) === "pwa_"){
      $config_factory->getEditable('image.style.' . $name_of_img)->delete();
    }
  }

  // Remove the VAPID keys on uninstall.
  \Drupal::state()->delete('pwa.vapid_keys');

  // Delete all subscriptions.
  \Drupal::service('user.data')->delete('pwa');
}

/**
 * Implements hook_schema().
 */
function pwa_schema() {
  $schema['pwa_subscriptions'] = [
    'description' => 'The base table for storing pwa subscription details',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The id for the table that is autoincremental id.",
      ],
      'subscription_data' => [
        'description' => 'Store authorization details and crypto key.',
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ],
      'subscription_endpoint' => [
        'description' => 'Stores browser subscription endpoint.',
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ],
      'registered_on' => [
        'description' => 'Time when an ID is registered.',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['id'],
  ];
  return $schema;
}
